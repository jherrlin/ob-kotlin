
* Install

  Load =ob-kotlin.el= file.

  Add =kotlin= to =org-babel-do-load-languages=

  #+BEGIN_SRC emacs-lisp :results output code
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((awk . t)
       (clojure . t)
       (emacs-lisp . t)
       (haskell . t)
       (java . t)
       (js . t)
       (kotlin . t)       ;; Add this
       (scheme . t)
       (sed . t)
       (shell . t)
       (sql . t)
       (sqlite . t)))
  #+END_SRC

* Examples
** Oneliners

   If you write oneliners =fun main()= is not needed. =ob-kotlin= adds that
   before evaluating the code.

   #+BEGIN_SRC org :results output code
     ,#+BEGIN_SRC kotlin :results output code
       println("Hello World!")
     ,#+END_SRC

     ,#+RESULTS:
     ,#+begin_src kotlin
       Hello World!
     ,#+end_src

     ,#+BEGIN_SRC shell :results output code
       cat main.kt
     ,#+END_SRC

     ,#+RESULTS:
     ,#+begin_src shell
       fun main() {
           println("Hello World!")
       }
     ,#+end_src
   #+END_SRC

** Add external package

   =kotlinx-coroutines-core-jvm-1.6.4.jar= needs to be in the same folder or
   =:classpath= needs to point at it.

   #+BEGIN_SRC org
     ,#+HEADER: :classpath kotlinx-coroutines-core-jvm-1.6.4.jar
     ,#+BEGIN_SRC kotlin :results output code
       import kotlinx.coroutines.*

       fun main() = runBlocking{
           launch {
               delay(1000L)
               println("World!")
           }
           println("Hello")
       }
     ,#+END_SRC

     ,#+RESULTS:
     ,#+begin_src kotlin
       Hello
       World!
     ,#+end_src
   #+END_SRC
